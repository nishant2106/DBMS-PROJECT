{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nishant/TE_FIRSTSEM/SL-1/project/bloodbook/src/pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport listPlugin from \"@fullcalendar/list\";\nimport { Button, Modal, ModalHeader, ModalBody, FormGroup, Form, Label, Input } from 'reactstrap';\nimport http from '.././shared/common';\n\nclass DashBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateClick = arg => {\n      // bind with an arrow function\n      this.toggleModal();\n      this.setState({\n        date: arg.dateStr\n      });\n    };\n\n    this.state = {\n      isModalOpen: false,\n      title: '',\n      date: '',\n      events: {},\n      color: '',\n      isLoaded: false\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.formattor = this.formattor.bind(this); // this.renderEventContent = this.renderEventContent.bind(this);\n  }\n\n  async componentDidMount() {\n    const url = \"http://localhost:3001/event\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      isLoaded: true\n    });\n    this.setState({\n      events: data\n    });\n    this.formattor(data);\n  }\n\n  formattor(data) {\n    let rows = [];\n\n    if (this.state.isLoaded) {\n      for (let i = 0; i < data.length; i++) {\n        let date = new Date(data[i].date);\n        let d = date.getDate();\n        let m = date.getMonth();\n        let y = date.getFullYear();\n        let edate = y + '-' + m + '-' + d;\n        rows.push({\n          \"title\": data[i].title,\n          \"start\": edate,\n          color: data[i].color\n        });\n      }\n    }\n\n    return rows;\n  }\n\n  handleLogin(event) {\n    this.toggleModal();\n\n    if (this.state.title) {\n      http.post('event', {\n        'title': this.state.title,\n        'date': this.state.date,\n        'color': this.state.color\n      }).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  toggleModal() {\n    this.setState({\n      isModalOpen: !this.state.isModalOpen\n    });\n  }\n\n  render() {\n    const newLocal = this.state.events;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin, interactionPlugin, listPlugin],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,dayGridWeek,dayGridDay,listWeek'\n        },\n        events: newLocal,\n        editable: \"true\",\n        selectable: \"true\",\n        dateClick: this.handleDateClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: this.state.isModalOpen,\n        toggle: this.toggleModal,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: this.toggleModal,\n          children: \"Create New Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"title\",\n                children: \"Event Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                id: \"title\",\n                name: \"title\",\n                onChange: e => {\n                  this.setState({\n                    title: e.target.value\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"color\",\n                children: \"Choose Color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"color\",\n                id: \"color\",\n                name: \"color\",\n                onChange: e => {\n                  this.setState({\n                    color: e.target.value\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              onClick: event => {\n                this.handleLogin(event);\n              },\n              children: \"Add Event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DashBoard;","map":{"version":3,"sources":["/home/nishant/TE_FIRSTSEM/SL-1/project/bloodbook/src/pages/Dashboard.js"],"names":["React","Component","FullCalendar","dayGridPlugin","interactionPlugin","listPlugin","Button","Modal","ModalHeader","ModalBody","FormGroup","Form","Label","Input","http","DashBoard","constructor","props","handleDateClick","arg","toggleModal","setState","date","dateStr","state","isModalOpen","title","events","color","isLoaded","bind","handleLogin","formattor","componentDidMount","url","response","fetch","data","json","rows","i","length","Date","d","getDate","m","getMonth","y","getFullYear","edate","push","event","post","then","console","log","catch","error","preventDefault","render","newLocal","left","center","right","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport listPlugin from \"@fullcalendar/list\";\nimport { Button,Modal, ModalHeader, ModalBody, FormGroup, Form, Label, Input\n} from 'reactstrap';\nimport http from '.././shared/common'\n\nclass DashBoard extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isModalOpen: false,\n            title:'',\n            date:'',\n            events:{},\n            color:'',\n            isLoaded:false\n        };\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.formattor = this.formattor.bind(this);\n        // this.renderEventContent = this.renderEventContent.bind(this);\n    }\n    async componentDidMount(){\n        const url=\"http://localhost:3001/event\"\n        const response = await fetch(url)\n        const data = await response.json()\n        this.setState({isLoaded:true})\n        this.setState({events:data})\n        this.formattor(data)\n    }\n    formattor(data){\n        let rows=[]\n        if(this.state.isLoaded){\n            for (let i = 0; i < data.length; i++) {\n                let date = new Date(data[i].date)\n                let d = date.getDate()\n                let m = date.getMonth()\n                let y = date.getFullYear()\n                let edate = y +'-'+m+'-'+d\n                rows.push(\n                    {\"title\":data[i].title,\"start\":edate,color:data[i].color}\n                )\n            }\n        }\n        return rows;\n    }\n    handleLogin(event) {\n        this.toggleModal();\n        if(this.state.title){\n            http.post('event',{\n                'title': this.state.title,\n                'date':this.state.date,\n                'color':this.state.color\n            })\n            .then(response=>{console.log(response)})\n            .catch(error=>{\n                console.log(error)\n            })\n        }   \n        event.preventDefault();\n\n    }\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n    handleDateClick = (arg) => { // bind with an arrow function\n        this.toggleModal();\n        this.setState({date:arg.dateStr})\n    }\n    render(){\n        const newLocal = this.state.events;\n        return(\n            <div>\n                <FullCalendar\n                    plugins={[ dayGridPlugin,interactionPlugin,listPlugin ]}\n                    headerToolbar={{\n                        left:'prev,next today',\n                        center:'title',\n                        right:'dayGridMonth,dayGridWeek,dayGridDay,listWeek'\n                    }}\n                    events={newLocal}\n                    editable=\"true\"\n                    selectable=\"true\"\n                    dateClick={this.handleDateClick}\n                />\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Create New Event</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup>\n                                <Label htmlFor=\"title\">Event Name</Label>\n                                <Input type=\"text\" id=\"title\" name=\"title\"\n                                    onChange={(e)=>{\n                                        this.setState({title:e.target.value})\n                                    }} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label htmlFor=\"color\">Choose Color</Label>\n                                <Input type=\"color\" id=\"color\" name=\"color\"\n                                    onChange={(e)=>{\n                                        this.setState({color:e.target.value})\n                                    }} />\n                            </FormGroup>\n                            <Button color=\"primary\" onClick={ (event) =>{\n                                    this.handleLogin(event)\n                                }}>Add Event</Button>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\nexport default DashBoard;"]},"metadata":{},"sourceType":"module"}