{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nishant/TE_FIRSTSEM/SL-1/project/bloodbook/src/pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport listPlugin from \"@fullcalendar/list\";\nimport { Button, Modal, ModalHeader, ModalBody, FormGroup, Form, Label, Input } from 'reactstrap';\nimport http from '.././shared/common';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass DashBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateClick = arg => {\n      // bind with an arrow function\n      this.toggleModal();\n      this.setState({\n        date: arg.dateStr\n      });\n    };\n\n    this.state = {\n      isModalOpen: false,\n      title: '',\n      date: '',\n      color: ''\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n  }\n\n  handleLogin(event) {\n    this.toggleModal();\n\n    if (this.state.title) {\n      http.post('event', {\n        'title': this.state.title,\n        'date': this.state.date,\n        'color': this.state.color\n      }).then(() => {\n        window.location.reload(false);\n        toast.success('Event Added Successfully.');\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      toast.error(\"Title can not be blank\");\n    }\n\n    event.preventDefault();\n  }\n\n  toggleModal() {\n    this.setState({\n      isModalOpen: !this.state.isModalOpen\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        newestOnTop: false,\n        closeOnClick: true,\n        rtl: false,\n        pauseOnFocusLoss: true,\n        draggable: true,\n        pauseOnHover: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin, interactionPlugin, listPlugin],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,dayGridWeek,dayGridDay,listWeek'\n        },\n        dateClick: this.handleDateClick,\n        events: \"http://localhost:3001/event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: this.state.isModalOpen,\n        toggle: this.toggleModal,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: this.toggleModal,\n          children: \"Create New Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"title\",\n                children: \"Event Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                id: \"title\",\n                name: \"title\",\n                onChange: e => {\n                  this.setState({\n                    title: e.target.value\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"color\",\n                children: \"Choose Color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"color\",\n                id: \"color\",\n                name: \"color\",\n                onChange: e => {\n                  this.setState({\n                    color: e.target.value\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              onClick: event => {\n                this.handleLogin(event);\n              },\n              children: \"Add Event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DashBoard;","map":{"version":3,"sources":["/home/nishant/TE_FIRSTSEM/SL-1/project/bloodbook/src/pages/Dashboard.js"],"names":["React","Component","FullCalendar","dayGridPlugin","interactionPlugin","listPlugin","Button","Modal","ModalHeader","ModalBody","FormGroup","Form","Label","Input","http","ToastContainer","toast","DashBoard","constructor","props","handleDateClick","arg","toggleModal","setState","date","dateStr","state","isModalOpen","title","color","bind","handleLogin","event","post","then","window","location","reload","success","catch","error","console","log","preventDefault","render","left","center","right","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,MAAT,EAAgBC,KAAhB,EAAuBC,WAAvB,EAAoCC,SAApC,EAA+CC,SAA/C,EAA0DC,IAA1D,EAAgEC,KAAhE,EAAuEC,KAAvE,QACO,YADP;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;;AAEA,MAAMC,SAAN,SAAwBhB,SAAxB,CAAiC;AAC7BiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAwCnBC,eAxCmB,GAwCAC,GAAD,IAAS;AAAE;AACzB,WAAKC,WAAL;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAACH,GAAG,CAACI;AAAV,OAAd;AACH,KA3CkB;;AAGf,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,KADJ;AAETC,MAAAA,KAAK,EAAC,EAFG;AAGTJ,MAAAA,IAAI,EAAC,EAHI;AAITK,MAAAA,KAAK,EAAC;AAJG,KAAb;AAMA,SAAKP,WAAL,GAAmB,KAAKA,WAAL,CAAiBQ,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKV,eAAL,GAAuB,KAAKA,eAAL,CAAqBU,IAArB,CAA0B,IAA1B,CAAvB;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKV,WAAL;;AACA,QAAG,KAAKI,KAAL,CAAWE,KAAd,EAAoB;AAChBd,MAAAA,IAAI,CAACmB,IAAL,CAAU,OAAV,EAAkB;AACd,iBAAS,KAAKP,KAAL,CAAWE,KADN;AAEd,gBAAO,KAAKF,KAAL,CAAWF,IAFJ;AAGd,iBAAQ,KAAKE,KAAL,CAAWG;AAHL,OAAlB,EAKCK,IALD,CAKM,MAAI;AACNC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACArB,QAAAA,KAAK,CAACsB,OAAN,CAAc,2BAAd;AACH,OARD,EASCC,KATD,CASOC,KAAK,IAAE;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OAXD;AAYH,KAbD,MAcI;AACAxB,MAAAA,KAAK,CAACwB,KAAN,CAAY,wBAAZ;AACH;;AACDR,IAAAA,KAAK,CAACW,cAAN;AAEH;;AACDrB,EAAAA,WAAW,GAAG;AACV,SAAKC,QAAL,CAAc;AACVI,MAAAA,WAAW,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADf,KAAd;AAGH;;AAKDiB,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,8BACI,QAAC,cAAD;AAAgB,QAAA,QAAQ,EAAC,WAAzB;AACI,QAAA,SAAS,EAAE,IADf;AAEI,QAAA,eAAe,EAAE,KAFrB;AAGI,QAAA,WAAW,EAAE,KAHjB;AAII,QAAA,YAAY,MAJhB;AAKI,QAAA,GAAG,EAAE,KALT;AAMI,QAAA,gBAAgB,MANpB;AAOI,QAAA,SAAS,MAPb;AAQI,QAAA,YAAY;AARhB;AAAA;AAAA;AAAA;AAAA,cADJ,eAUI,QAAC,YAAD;AACI,QAAA,OAAO,EAAE,CAAEzC,aAAF,EAAgBC,iBAAhB,EAAkCC,UAAlC,CADb;AAEI,QAAA,aAAa,EAAE;AACXwC,UAAAA,IAAI,EAAC,iBADM;AAEXC,UAAAA,MAAM,EAAC,OAFI;AAGXC,UAAAA,KAAK,EAAC;AAHK,SAFnB;AAOI,QAAA,SAAS,EAAE,KAAK3B,eAPpB;AAQI,QAAA,MAAM,EAAE;AARZ;AAAA;AAAA;AAAA;AAAA,cAVJ,eAoBI,QAAC,KAAD;AAAO,QAAA,MAAM,EAAE,KAAKM,KAAL,CAAWC,WAA1B;AAAuC,QAAA,MAAM,EAAE,KAAKL,WAApD;AAAA,gCACI,QAAC,WAAD;AAAa,UAAA,MAAM,EAAE,KAAKA,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,SAAD;AAAA,iCACI,QAAC,IAAD;AAAA,oCACI,QAAC,SAAD;AAAA,sCACI,QAAC,KAAD;AAAO,gBAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,KAAD;AAAO,gBAAA,IAAI,EAAC,MAAZ;AAAmB,gBAAA,EAAE,EAAC,OAAtB;AAA8B,gBAAA,IAAI,EAAC,OAAnC;AACI,gBAAA,QAAQ,EAAG0B,CAAD,IAAK;AACX,uBAAKzB,QAAL,CAAc;AAACK,oBAAAA,KAAK,EAACoB,CAAC,CAACC,MAAF,CAASC;AAAhB,mBAAd;AACH;AAHL;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAQI,QAAC,SAAD;AAAA,sCACI,QAAC,KAAD;AAAO,gBAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,KAAD;AAAO,gBAAA,IAAI,EAAC,OAAZ;AAAoB,gBAAA,EAAE,EAAC,OAAvB;AAA+B,gBAAA,IAAI,EAAC,OAApC;AACI,gBAAA,QAAQ,EAAGF,CAAD,IAAK;AACX,uBAAKzB,QAAL,CAAc;AAACM,oBAAAA,KAAK,EAACmB,CAAC,CAACC,MAAF,CAASC;AAAhB,mBAAd;AACH;AAHL;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBARJ,eAeI,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,SAAd;AAAwB,cAAA,OAAO,EAAIlB,KAAD,IAAU;AACpC,qBAAKD,WAAL,CAAiBC,KAAjB;AACH,eAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA+CH;;AA7F4B;;AA+FjC,eAAef,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport listPlugin from \"@fullcalendar/list\";\nimport { Button,Modal, ModalHeader, ModalBody, FormGroup, Form, Label, Input\n} from 'reactstrap';\nimport http from '.././shared/common'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass DashBoard extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isModalOpen: false,\n            title:'',\n            date:'',\n            color:''\n        };\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleDateClick = this.handleDateClick.bind(this);\n    }\n    handleLogin(event) {\n        this.toggleModal();\n        if(this.state.title){\n            http.post('event',{\n                'title': this.state.title,\n                'date':this.state.date,\n                'color':this.state.color\n            })\n            .then(()=>{\n                window.location.reload(false);\n                toast.success('Event Added Successfully.')\n            })\n            .catch(error=>{\n                console.log(error)\n            })\n        }  \n        else{\n            toast.error(\"Title can not be blank\");\n        } \n        event.preventDefault();\n\n    }\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n    handleDateClick = (arg) => { // bind with an arrow function\n        this.toggleModal();\n        this.setState({date:arg.dateStr})\n    }\n    render(){\n        return(\n            <div>\n                <ToastContainer position=\"top-right\"\n                    autoClose={2000}\n                    hideProgressBar={false}\n                    newestOnTop={false}\n                    closeOnClick\n                    rtl={false}\n                    pauseOnFocusLoss\n                    draggable\n                    pauseOnHover/>\n                <FullCalendar\n                    plugins={[ dayGridPlugin,interactionPlugin,listPlugin ]}\n                    headerToolbar={{\n                        left:'prev,next today',\n                        center:'title',\n                        right:'dayGridMonth,dayGridWeek,dayGridDay,listWeek'\n                    }}\n                    dateClick={this.handleDateClick}\n                    events={\"http://localhost:3001/event\"}\n                />\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Create New Event</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup>\n                                <Label htmlFor=\"title\">Event Name</Label>\n                                <Input type=\"text\" id=\"title\" name=\"title\"\n                                    onChange={(e)=>{\n                                        this.setState({title:e.target.value})\n                                    }} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label htmlFor=\"color\">Choose Color</Label>\n                                <Input type=\"color\" id=\"color\" name=\"color\"\n                                    onChange={(e)=>{\n                                        this.setState({color:e.target.value})\n                                    }} />\n                            </FormGroup>\n                            <Button color=\"primary\" onClick={ (event) =>{\n                                    this.handleLogin(event)\n                                }}>Add Event</Button>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\nexport default DashBoard;"]},"metadata":{},"sourceType":"module"}