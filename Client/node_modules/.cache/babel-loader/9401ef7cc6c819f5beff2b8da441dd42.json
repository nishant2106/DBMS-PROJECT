{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nishant/TE_FIRSTSEM/SL-1/project/bloodbook/src/pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { Button, Modal, ModalHeader, ModalBody, FormGroup, Form, Label, Input } from 'reactstrap';\nimport http from '.././shared/common';\n\nclass DashBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateClick = arg => {\n      // bind with an arrow function\n      this.toggleModal();\n      this.setState({\n        date: arg.dateStr\n      });\n    };\n\n    this.state = {\n      isModalOpen: false,\n      title: '',\n      date: '',\n      events: [],\n      isLoaded: false\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.formattor = this.formattor.bind(this);\n  }\n\n  async componentDidMount() {\n    const url = \"http://localhost:3001/event\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      isLoaded: true\n    });\n    this.formattor(data);\n  }\n\n  formattor(data) {\n    let rows = [];\n\n    if (this.state.isLoaded) {\n      for (let i = 0; i < data.length; i++) {\n        let date = new Date(data[i].date);\n        let d = date.getDate();\n        let m = date.getMonth();\n        let y = date.getFullYear();\n        let edate = y + '-' + m + '-' + d;\n        rows.push({\n          \"title\": data[i].title,\n          \"date\": edate\n        });\n      }\n    }\n\n    console.log(typeof rows);\n    this.setState({\n      events: rows\n    });\n  }\n\n  handleLogin(event) {\n    this.toggleModal();\n\n    if (this.state.title) {\n      http.post('event', {\n        'title': this.state.title,\n        'date': this.state.date\n      }).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  toggleModal() {\n    this.setState({\n      isModalOpen: !this.state.isModalOpen\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin, interactionPlugin],\n        dateClick: this.handleDateClick,\n        events: [{\n          'title': 'event1',\n          'date': '2020-11-03'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: this.state.isModalOpen,\n        toggle: this.toggleModal,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: this.toggleModal,\n          children: \"Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"title\",\n                children: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                id: \"title\",\n                name: \"title\",\n                onChange: e => {\n                  this.setState({\n                    title: e.target.value\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              onClick: event => {\n                this.handleLogin(event);\n              },\n              children: \"Add Event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DashBoard;","map":{"version":3,"sources":["/home/nishant/TE_FIRSTSEM/SL-1/project/bloodbook/src/pages/Dashboard.js"],"names":["React","Component","FullCalendar","dayGridPlugin","interactionPlugin","Button","Modal","ModalHeader","ModalBody","FormGroup","Form","Label","Input","http","DashBoard","constructor","props","handleDateClick","arg","toggleModal","setState","date","dateStr","state","isModalOpen","title","events","isLoaded","bind","handleLogin","formattor","componentDidMount","url","response","fetch","data","json","rows","i","length","Date","d","getDate","m","getMonth","y","getFullYear","edate","push","console","log","event","post","then","catch","error","preventDefault","render","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { Button,Modal, ModalHeader, ModalBody, FormGroup, Form, Label, Input\n} from 'reactstrap';\nimport http from '.././shared/common'\n\nclass DashBoard extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isModalOpen: false,\n            title:'',\n            date:'',\n            events:[],\n            isLoaded:false\n        };\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.formattor = this.formattor.bind(this);\n    }\n    async componentDidMount(){\n        const url=\"http://localhost:3001/event\"\n        const response = await fetch(url)\n        const data = await response.json()\n        this.setState({isLoaded:true})\n        this.formattor(data)\n    }\n    formattor(data){\n        let rows=[]\n        if(this.state.isLoaded){\n            for (let i = 0; i < data.length; i++) {\n                let date = new Date(data[i].date)\n                let d = date.getDate()\n                let m = date.getMonth()\n                let y = date.getFullYear()\n                let edate = y +'-'+m+'-'+d\n                rows.push(\n                    {\"title\":data[i].title,\"date\":edate}\n                )\n            }\n        }\n        console.log(typeof rows)\n        this.setState({events:rows})\n    }\n    handleLogin(event) {\n        this.toggleModal();\n        if(this.state.title){\n            http.post('event',{\n                'title': this.state.title,\n                'date':this.state.date\n            })\n            .then(response=>{console.log(response)})\n            .catch(error=>{\n                console.log(error)\n            })\n        }   \n        event.preventDefault();\n\n    }\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n    handleDateClick = (arg) => { // bind with an arrow function\n        this.toggleModal();\n        this.setState({date:arg.dateStr})\n    }\n    render(){\n        return(\n            <div>\n                <FullCalendar\n                    plugins={[ dayGridPlugin,interactionPlugin ]}\n                    dateClick={this.handleDateClick}\n                    events={[\n                        {'title':'event1','date':'2020-11-03'}\n                    ]}\n                />\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Event</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup>\n                                <Label htmlFor=\"title\">Title</Label>\n                                <Input type=\"text\" id=\"title\" name=\"title\"\n                                    onChange={(e)=>{\n                                        this.setState({title:e.target.value})\n                                    }} />\n                            </FormGroup>\n                            <Button color=\"primary\" onClick={ (event) =>{\n                                    this.handleLogin(event)\n                                }}>Add Event</Button>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\nexport default DashBoard;"]},"metadata":{},"sourceType":"module"}