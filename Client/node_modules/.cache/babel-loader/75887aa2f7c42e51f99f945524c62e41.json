{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nishant/TE_FIRSTSEM/SL-1/project/bloodbook/src/pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { Button, Modal, ModalHeader, ModalBody, FormGroup, Form, Label, Input } from 'reactstrap';\nimport http from '.././shared/common';\n\nclass DashBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateClick = arg => {\n      // bind with an arrow function\n      this.toggleModal();\n      alert(arg.dateStr);\n    };\n\n    this.state = {\n      isModalOpen: false,\n      title: '',\n      date: ''\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  handleLogin(event) {\n    this.toggleModal();\n\n    if (this.username.value.length > 1 && this.password.value.length > 1) {\n      http.post('auth', {\n        'username': this.username.value,\n        'password': this.password.value\n      }).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  toggleModal() {\n    this.setState({\n      isModalOpen: !this.state.isModalOpen\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin, interactionPlugin],\n        dateClick: this.handleDateClick,\n        events: [{\n          title: 'event 1',\n          date: '2020-11-01'\n        }, {\n          title: 'event 2',\n          date: '2019-04-02'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: this.state.isModalOpen,\n        toggle: this.toggleModal,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: this.toggleModal,\n          children: \"Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"title\",\n                children: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                id: \"title\",\n                name: \"title\",\n                innerRef: input => this.state.title = input\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              onClick: event => {\n                this.handleLogin(event);\n              },\n              children: \"Add Event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DashBoard;","map":{"version":3,"sources":["/home/nishant/TE_FIRSTSEM/SL-1/project/bloodbook/src/pages/Dashboard.js"],"names":["React","Component","FullCalendar","dayGridPlugin","interactionPlugin","Button","Modal","ModalHeader","ModalBody","FormGroup","Form","Label","Input","http","DashBoard","constructor","props","handleDateClick","arg","toggleModal","alert","dateStr","state","isModalOpen","title","date","bind","handleLogin","event","username","value","length","password","post","then","response","console","log","catch","error","preventDefault","setState","render","input"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,SAASC,MAAT,EAAgBC,KAAhB,EAAuBC,WAAvB,EAAoCC,SAApC,EAA+CC,SAA/C,EAA0DC,IAA1D,EAAgEC,KAAhE,EAAuEC,KAAvE,QACO,YADP;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;;AAEA,MAAMC,SAAN,SAAwBb,SAAxB,CAAiC;AAC7Bc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA+BnBC,eA/BmB,GA+BAC,GAAD,IAAS;AAAE;AACzB,WAAKC,WAAL;AACAC,MAAAA,KAAK,CAACF,GAAG,CAACG,OAAL,CAAL;AACH,KAlCkB;;AAGf,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,KADJ;AAETC,MAAAA,KAAK,EAAC,EAFG;AAGTC,MAAAA,IAAI,EAAC;AAHI,KAAb;AAKA,SAAKN,WAAL,GAAmB,KAAKA,WAAL,CAAiBO,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKT,WAAL;;AACA,QAAI,KAAKU,QAAL,CAAcC,KAAd,CAAoBC,MAApB,GAA6B,CAA7B,IAAkC,KAAKC,QAAL,CAAcF,KAAd,CAAoBC,MAApB,GAA6B,CAAnE,EAAsE;AAClElB,MAAAA,IAAI,CAACoB,IAAL,CAAU,MAAV,EAAiB;AACb,oBAAY,KAAKJ,QAAL,CAAcC,KADb;AAEb,oBAAW,KAAKE,QAAL,CAAcF;AAFZ,OAAjB,EAICI,IAJD,CAIMC,QAAQ,IAAE;AAACC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAAsB,OAJvC,EAKCG,KALD,CAKOC,KAAK,IAAE;AACVH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,OAPD;AAQH;;AACDX,IAAAA,KAAK,CAACY,cAAN;AAEH;;AACDrB,EAAAA,WAAW,GAAG;AACV,SAAKsB,QAAL,CAAc;AACVlB,MAAAA,WAAW,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADf,KAAd;AAGH;;AAKDmB,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,8BACI,QAAC,YAAD;AACI,QAAA,OAAO,EAAE,CAAEvC,aAAF,EAAgBC,iBAAhB,CADb;AAEI,QAAA,SAAS,EAAE,KAAKa,eAFpB;AAGI,QAAA,MAAM,EAAE,CACJ;AAAEO,UAAAA,KAAK,EAAE,SAAT;AAAoBC,UAAAA,IAAI,EAAE;AAA1B,SADI,EAEJ;AAAED,UAAAA,KAAK,EAAE,SAAT;AAAoBC,UAAAA,IAAI,EAAE;AAA1B,SAFI;AAHZ;AAAA;AAAA;AAAA;AAAA,cADJ,eASI,QAAC,KAAD;AAAO,QAAA,MAAM,EAAE,KAAKH,KAAL,CAAWC,WAA1B;AAAuC,QAAA,MAAM,EAAE,KAAKJ,WAApD;AAAA,gCACI,QAAC,WAAD;AAAa,UAAA,MAAM,EAAE,KAAKA,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,SAAD;AAAA,iCACI,QAAC,IAAD;AAAA,oCACI,QAAC,SAAD;AAAA,sCACI,QAAC,KAAD;AAAO,gBAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,KAAD;AAAO,gBAAA,IAAI,EAAC,MAAZ;AAAmB,gBAAA,EAAE,EAAC,OAAtB;AAA8B,gBAAA,IAAI,EAAC,OAAnC;AACI,gBAAA,QAAQ,EAAGwB,KAAD,IAAW,KAAKrB,KAAL,CAAWE,KAAX,GAAmBmB;AAD5C;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,SAAd;AAAwB,cAAA,OAAO,EAAIf,KAAD,IAAU;AACpC,qBAAKD,WAAL,CAAiBC,KAAjB;AACH,eAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA2BH;;AAhE4B;;AAkEjC,eAAed,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { Button,Modal, ModalHeader, ModalBody, FormGroup, Form, Label, Input\n} from 'reactstrap';\nimport http from '.././shared/common'\n\nclass DashBoard extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isModalOpen: false,\n            title:'',\n            date:''\n        };\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n    }\n    handleLogin(event) {\n        this.toggleModal();\n        if( this.username.value.length > 1 && this.password.value.length > 1 ){\n            http.post('auth',{\n                'username': this.username.value,\n                'password':this.password.value\n            })\n            .then(response=>{console.log(response)})\n            .catch(error=>{\n                console.log(error)\n            })\n        }\n        event.preventDefault();\n\n    }\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n    handleDateClick = (arg) => { // bind with an arrow function\n        this.toggleModal();\n        alert(arg.dateStr)\n    }\n    render(){\n        return(\n            <div>\n                <FullCalendar\n                    plugins={[ dayGridPlugin,interactionPlugin ]}\n                    dateClick={this.handleDateClick}\n                    events={[\n                        { title: 'event 1', date: '2020-11-01' },\n                        { title: 'event 2', date: '2019-04-02' }\n                    ]}\n                />\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Event</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup>\n                                <Label htmlFor=\"title\">Title</Label>\n                                <Input type=\"text\" id=\"title\" name=\"title\"\n                                    innerRef={(input) => this.state.title = input} />\n                            </FormGroup>\n                            <Button color=\"primary\" onClick={ (event) =>{\n                                    this.handleLogin(event)\n                                }}>Add Event</Button>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\nexport default DashBoard;"]},"metadata":{},"sourceType":"module"}